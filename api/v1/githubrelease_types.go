package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GithubReleaseSpec defines the desired state of GithubRelease
type GithubReleaseSpec struct {
	ReleaseURL     string         `json:"releaseUrl"`
	TagName        string         `json:"tagName"`
	ReleaseDetails ReleaseDetails `json:"releaseDetails,omitempty"`
}

// ReleaseDetails contains information about the release assets
type ReleaseDetails struct {
	Assets []Asset `json:"assets,omitempty"`
}

// Asset represents a single asset in a GitHub release
type Asset struct {
	Name               string `json:"name"`
	BrowserDownloadURL string `json:"browserDownloadUrl"`
}

// GithubReleaseStatus defines the observed state of GithubRelease
type GithubReleaseStatus struct {
	ProcessingStatus string `json:"processingStatus"`
	JobName          string `json:"jobName,omitempty"`
	LastProcessed    string `json:"lastProcessed,omitempty"`
	Succeeded        bool   `json:"succeeded"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// GithubRelease is the Schema for the githubreleases API
type GithubRelease struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GithubReleaseSpec   `json:"spec,omitempty"`
	Status GithubReleaseStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// GithubReleaseList contains a list of GithubRelease
type GithubReleaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GithubRelease `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GithubRelease{}, &GithubReleaseList{})
}
