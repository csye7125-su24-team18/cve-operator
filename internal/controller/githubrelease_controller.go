package controller

import (
	"context"
	"fmt"
	"os"
	"strings"

	webappv1 "githubreleasesmonitor/project/api/v1"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

type GithubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

func (r *GithubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	var release webappv1.GithubRelease
	if err := r.Get(ctx, req.NamespacedName, &release); err != nil {
		if errors.IsNotFound(err) {
			return r.handleDeletion(ctx, req.NamespacedName)
		}
		log.Error(err, "unable to fetch GithubRelease")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	if release.Status.Succeeded {
		return ctrl.Result{}, nil
	}

	deltaAssetURL := r.findDeltaAssetURL(&release)
	if deltaAssetURL == "" {
		log.Info("No delta asset found")
		return ctrl.Result{}, nil
	}

	if err := r.reconcileJob(ctx, &release, deltaAssetURL); err != nil {
		log.Error(err, "unable to reconcile Job")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *GithubReleaseReconciler) handleDeletion(ctx context.Context, namespacedName types.NamespacedName) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	var monitorList webappv1.GithubReleasesMonitorList
	if err := r.List(ctx, &monitorList); err != nil {
		log.Error(err, "unable to list GithubReleasesMonitors")
		return ctrl.Result{}, err
	}

	for _, monitor := range monitorList.Items {
		if monitor.Spec.URL == namespacedName.Name {
			newRelease := &webappv1.GithubRelease{
				ObjectMeta: metav1.ObjectMeta{
					Name:      namespacedName.Name,
					Namespace: namespacedName.Namespace,
				},
				Spec: webappv1.GithubReleaseSpec{
					ReleaseURL: monitor.Spec.URL,
				},
			}
			if err := r.Create(ctx, newRelease); err != nil {
				log.Error(err, "unable to recreate GithubRelease")
				return ctrl.Result{}, err
			}
			log.Info("GithubRelease recreated", "Name", newRelease.Name)
			return ctrl.Result{Requeue: true}, nil
		}
	}

	return ctrl.Result{}, nil
}

func (r *GithubReleaseReconciler) findDeltaAssetURL(release *webappv1.GithubRelease) string {
	for _, asset := range release.Spec.ReleaseDetails.Assets {
		if strings.Contains(strings.ToLower(asset.Name), "delta") {
			return asset.BrowserDownloadURL
		}
	}
	return ""
}

func (r *GithubReleaseReconciler) reconcileJob(ctx context.Context, release *webappv1.GithubRelease, deltaAssetURL string) error {
	log := log.FromContext(ctx)

	jobName := fmt.Sprintf("%s-job", release.Name)
	secretName := fmt.Sprintf("%s-secret", release.Name)

	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      jobName,
			Namespace: release.Namespace,
		},
		Spec: batchv1.JobSpec{
			Template: corev1.PodTemplateSpec{
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "process-delta",
							Image: os.Getenv("PROCESS_IMAGE"),
							Env: []corev1.EnvVar{
								{
									Name: "ZIP_URL",
									ValueFrom: &corev1.EnvVarSource{
										SecretKeyRef: &corev1.SecretKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: secretName,
											},
											Key: "ZIP_URL",
										},
									},
								},
								{
									Name:  "KAFKA_USERNAME",
									Value: os.Getenv("KAFKA_USERNAME"),
								},
								{
									Name:  "KAFKA_PASSWORD",
									Value: os.Getenv("KAFKA_PASSWORD"),
								},
								{
									Name:  "KAFKA_BROKER1",
									Value: os.Getenv("KAFKA_BROKER1"),
								},
								{
									Name:  "KAFKA_BROKER2",
									Value: os.Getenv("KAFKA_BROKER2"),
								},
								{
									Name:  "KAFKA_BROKER3",
									Value: os.Getenv("KAFKA_BROKER3"),
								},
								{
									Name:  "KAFKA_TOPIC",
									Value: os.Getenv("KAFKA_TOPIC"),
								},
							},
						},
					},
					RestartPolicy: corev1.RestartPolicyOnFailure,
				},
			},
			BackoffLimit: func() *int32 { i := int32(3); return &i }(),
		},
	}

	if err := r.reconcileSecret(ctx, release, secretName, deltaAssetURL); err != nil {
		return err
	}

	if err := controllerutil.SetControllerReference(release, job, r.Scheme); err != nil {
		return err
	}

	_, err := ctrl.CreateOrUpdate(ctx, r.Client, job, func() error {
		return nil
	})

	if err != nil {
		return err
	}

	if job.Status.Succeeded > 0 {
		release.Status.Succeeded = true
		release.Status.JobName = job.Name
		if err := r.Status().Update(ctx, release); err != nil {
			log.Error(err, "unable to update GithubRelease status")
			return err
		}
	}

	return nil
}

func (r *GithubReleaseReconciler) reconcileSecret(ctx context.Context, release *webappv1.GithubRelease, secretName, deltaAssetURL string) error {
	secret := &corev1.Secret{
		ObjectMeta: metav1.ObjectMeta{
			Name:      secretName,
			Namespace: release.Namespace,
		},
		StringData: map[string]string{
			"ZIP_URL": deltaAssetURL,
		},
	}

	if err := controllerutil.SetControllerReference(release, secret, r.Scheme); err != nil {
		return err
	}

	_, err := ctrl.CreateOrUpdate(ctx, r.Client, secret, func() error {
		secret.StringData["ZIP_URL"] = deltaAssetURL
		return nil
	})

	return err
}

func (r *GithubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&webappv1.GithubRelease{}).
		Owns(&batchv1.Job{}).
		Owns(&corev1.Secret{}).
		Complete(r)
}
